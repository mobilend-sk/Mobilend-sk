class TelegramService {
	constructor() {
		// –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ API routes
		this.apiEndpoint = '/api/telegram/send-order'
	}

	// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API route
	async sendOrderToTelegram(orderData) {
		try {
			console.log('üì§ Odosielanie objedn√°vky cez server API...')

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞—à API endpoint
			const response = await fetch(this.apiEndpoint, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(orderData)
			})

			// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
			const result = await response.json()

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
			if (!response.ok) {
				console.error('‚ùå Server API error:', result.message)
				throw new Error(result.message || 'Chyba pri odoslan√≠ objedn√°vky')
			}

			// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
			console.log('‚úÖ Objedn√°vka √∫spe≈°ne odoslan√° cez server:', {
				orderNumber: result.orderNumber,
				messageId: result.messageId
			})

			return {
				success: true,
				message: result.message,
				orderNumber: result.orderNumber,
				messageId: result.messageId
			}

		} catch (error) {
			console.error('‚ùå Chyba pri odoslan√≠ objedn√°vky:', error)

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			console.warn('üìã Objedn√°vka ktor√° sa nepodarila odosla≈•:')
			console.table({
				'ƒå√≠slo objedn√°vky': orderData.orderNumber,
				'Z√°kazn√≠k': `${orderData.contact.firstName} ${orderData.contact.lastName}`,
				'Email': orderData.contact.email,
				'Telef√≥n': orderData.contact.phone,
				'Suma': `‚Ç¨${orderData.total.toFixed(2)}`,
				'Produkty': orderData.totalItems
			})

			// –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
			throw new Error('Nepodarilo sa odosla≈• objedn√°vku. Sk√∫ste to znovu.')
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	async sendTestNotification() {
		try {
			const testOrder = {
				orderNumber: 'TEST' + Date.now(),
				contact: {
					firstName: 'J√°n',
					lastName: 'Test',
					phone: '+421 900 123 456',
					email: 'test@example.sk',
					comment: 'Testovacia objedn√°vka pre overenie Telegram integr√°cie'
				},
				delivery: {
					address: 'Testovacia adresa 123',
					postalCode: '811 01',
					city: 'Bratislava',
					paymentMethod: 'cash_on_delivery'
				},
				items: [
					{
						product: {
							model: 'TEST Samsung Galaxy S24 256GB',
							price: 100,
							discount: 0
						},
						quantity: 1
					}
				],
				total: 100,
				totalItems: 1,
				timestamp: new Date().toISOString()
			}

			console.log('üß™ Sp√∫≈°≈•anie testovej objedn√°vky...')
			const result = await this.sendOrderToTelegram(testOrder)
			console.log('‚úÖ Test √∫spe≈°n√Ω:', result)

			return result
		} catch (error) {
			console.error('‚ùå Test ne√∫spe≈°n√Ω:', error)
			throw error
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
	async checkApiHealth() {
		try {
			// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
			// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
			return {
				success: true,
				message: 'API endpoint je dostupn√Ω'
			}
		} catch (error) {
			return {
				success: false,
				message: 'API endpoint nie je dostupn√Ω'
			}
		}
	}
}

const telegramService = new TelegramService()

export default telegramService