// src/app/blog/[slug]/page.js
// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞ - —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

import { notFound } from 'next/navigation'
import { getAllBlogSlugs, getBlogPostBySlug, getRelatedBlogPosts } from '@/lib/blog'
import ArticlePage from '@/pages/ArticlePage/ArticlePage'

// ISR - –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
export const revalidate = 3600

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
export async function generateStaticParams() {
	try {
		console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –¥–ª—è –±–ª–æ–≥ —Å—Ç–∞—Ç–µ–π...')

		const slugs = getAllBlogSlugs() // –£–±–∏—Ä–∞–µ–º await

		console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${slugs.length} –±–ª–æ–≥ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`)

		return slugs.map((slug) => ({
			slug: slug,
		}))
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π –±–ª–æ–≥–∞:', error)
		return []
	}
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
export async function generateMetadata({ params }) {
	try {
		const { slug } = await params
		const post = getBlogPostBySlug(slug) // –£–±–∏—Ä–∞–µ–º await

		if (!post) {
			return {
				title: 'ƒål√°nok sa nena≈°iel - Mobilend Blog',
				description: 'Po≈æadovan√Ω ƒçl√°nok sa nena≈°iel v na≈°om blogu.'
			}
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OpenGraph
		const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://mobilend.sk'
		const ogImage = post.image
			? `${baseUrl}${post.image}`
			: `${baseUrl}/images/blog/default-blog.jpg`

		return {
			title: `${post.title} | Mobilend Blog`,
			description: post.description || post.title,

			keywords: post.categories || [],

			// Open Graph —Ç–µ–≥–∏
			openGraph: {
				title: post.title,
				description: post.description || post.title,
				type: 'article',
				url: `${baseUrl}/blog/${slug}`,
				siteName: 'Mobilend',
				locale: 'sk_SK',
				images: [
					{
						url: ogImage,
						width: 1200,
						height: 630,
						alt: post.title,
					}
				],
				publishedTime: post.date,
				authors: [post.author || 'Mobilend'],
				section: post.categories ? post.categories[0] : 'Technology',
				tags: post.categories || [],
			},

			// Twitter Card
			twitter: {
				card: 'summary_large_image',
				title: post.title,
				description: post.description || post.title,
				images: [ogImage],
				creator: '@mobilend_sk', // –µ—Å–ª–∏ –µ—Å—Ç—å Twitter –∞–∫–∫–∞—É–Ω—Ç
			},

			// Article —Ç–µ–≥–∏
			other: {
				'article:published_time': post.date,
				'article:author': post.author || 'Mobilend',
				'article:section': post.categories ? post.categories[0] : 'Technology',
				'article:tag': post.categories ? post.categories.join(', ') : '',
			},

			// Robots
			robots: {
				index: true,
				follow: true,
				googleBot: {
					index: true,
					follow: true,
					'max-video-preview': -1,
					'max-image-preview': 'large',
					'max-snippet': -1,
				},
			},

			// Canonical URL
			alternates: {
				canonical: `https://mobilend.sk/blog/${slug}`,
			},
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç—å–∏:', error)
		return {
			title: 'Chyba naƒç√≠tania ƒçl√°nku - Mobilend Blog'
		}
	}
}

export default async function BlogPost({ params }) {
	try {
		const { slug } = await params

		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é –ø–æ slug
		const post = getBlogPostBySlug(slug) // –£–±–∏—Ä–∞–µ–º await

		// –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 404
		if (!post) {
			console.warn(`–°—Ç–∞—Ç—å—è —Å slug "${slug}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
			notFound()
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é)
		const relatedPosts = getRelatedBlogPosts(slug, 4) // –£–±–∏—Ä–∞–µ–º await

		// –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
		return <ArticlePage post={post} relatedPosts={relatedPosts} />

	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—å–∏:', error)
		notFound()
	}
}